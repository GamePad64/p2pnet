/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto2";
option cc_generic_services = true;

package p2pnet.api;

message APIMessage {
	enum MessageType {
		NODE_REGISTER = 0;
		NODE_REGISTER_CALLBACK = 1;

		NODE_UNREGISTER = 2;
		NODE_UNREGISTER_CALLBACK = 3;

		NODE_CONNECT = 4;
		NODE_CONNECT_CALLBACK = 5;

		NODE_ACCEPT = 6;
		NODE_ACCEPT_CALLBACK = 7;

		NODE_LISTEN = 8;
		NODE_LISTEN_CALLBACK = 9;

		NODE_BIND = 10;
		NODE_BIND_CALLBACK = 11;

		SOCKET_REGISTER = 12;
		SOCKET_REGISTER_CALLBACK = 13;

		SOCKET_UNREGISTER = 14;
		SOCKET_UNREGISTER_CALLBACK = 15;
	}

	required MessageType type = 1;

	//optional uint32 error_code = 2;
	//optional string error_what = 3;

	optional bytes api_message = 4;

	/* Message definitions */
	message NodeRegister {}
	message NodeRegisterCallback {
		optional uint32 node_id = 1;
	}

	message NodeUnRegister {
		optional uint32 node_id = 1;
	}
	message NodeUnRegisterCallback {
		optional uint32 node_id = 1;
	}

	message NodeConnect {
		optional uint32 node_id = 1;
		optional string SH = 2;
	}
	message NodeConnectCallback {
		optional uint32 node_id = 1;
		optional uint32 socket_id = 2;
	}

	message NodeAccept {
		optional uint32 node_id = 1;
	}
	message NodeAcceptCallback {
		optional uint32 node_id = 1;
		optional uint32 socket_id = 2;
		optional string SH = 3;
	}

	message NodeListen {
		optional uint32 node_id = 1;
		optional uint32 max_connections = 2;
	}
	message NodeListenCallback {
		optional uint32 node_id = 1;
	}

	message NodeBind {
		optional uint32 node_id = 1;
		optional bytes binary_private_key = 2;
		optional string b58_private_key = 3;
	}
	message NodeBindCallback {
		optional uint32 node_id = 1;
	}

	message SocketRegister {
		optional uint32 node_id = 1;
	}
	message SocketRegisterCallback {
		optional uint32 node_id = 1;
		optional uint32 socket_id = 2;
	}

	message SocketUnRegister {
		optional uint32 node_id = 1;
		optional uint32 socket_id = 2;
	}
	message SocketUnRegisterCallback {
		optional uint32 node_id = 1;
		optional uint32 socket_id = 2;
	}
}