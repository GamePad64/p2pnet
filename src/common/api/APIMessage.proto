/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto2";
option cc_generic_services = true;

package p2pnet.api;

message APIMessage {
	enum MessageType {
		NODE_REGISTER = 0;
		NODE_UNREGISTER = 1;
		NODE_CONNECT = 2;
		NODE_ACCEPT = 3;
		NODE_LISTEN = 4;
		NODE_BIND = 5;

		SOCKET_UNREGISTER = 6;
	}

	optional MessageType type = 1;
	optional uint32 message_token = 2;

	message Error {
		optional int32 error_code = 1;
		optional string error_what = 2;
		optional string error_category = 3;
	}

	optional Error error = 3;	// This is remote-throw.
	optional bool reply = 4 [default = false];

	/* Message definitions */
	message NodeRegister {
		optional uint32 node_id = 1;
	}
	optional NodeRegister node_register = 16;

	message NodeUnRegister {
		optional uint32 node_id = 1;
	}
	optional NodeUnRegister node_unregister = 17;

	message NodeConnect {
		optional uint32 node_id = 1;
		optional string SH = 2; // Request only
		optional uint32 socket_id = 3;	// Reply only
	}
	optional NodeConnect node_connect = 18;

	message NodeAccept {
		optional uint32 node_id = 1;
		optional string SH = 2;	// Reply only
		optional uint32 socket_id = 3;	// Reply only
	}
	optional NodeAccept node_accept = 19;

	message NodeListen {
		optional uint32 node_id = 1;
		optional uint32 max_connections = 2;	// Request only
	}
	optional NodeListen node_listen = 20;

	message NodeBind {
		optional uint32 node_id = 1;
		optional bytes binary_private_key = 2;	// Request only
		optional string b58_private_key = 3;	// Request only
	}
	optional NodeBind node_bind = 21;

	message SocketUnRegister {
		optional uint32 node_id = 1;
		optional uint32 socket_id = 2;
	}
	optional SocketUnRegister socket_unregister = 22;
}