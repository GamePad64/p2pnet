/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto2";
package p2pnet.protocol;

message OverlayMessageStructure {
	message Header {
		required bytes src_th = 1;
		optional bytes dest_th = 2;
	}

	required Header header = 1;

	message Payload {
		// MessageType section.
		enum MessageType {
			// AES encrypted message type. serialized_payload must contain serialized Payload type.
			ENCRYPTED = 0;
			DATA = 1;
			ONION = 2;

			// Key exchange cryptographic messages.
			CONNECTION_PUBKEY = 3;
			CONNECTION_ECDH = 4;
			CONNECTION_ACK = 5;
		}

		optional MessageType message_type = 1 [default = ENCRYPTED];

		// End of MessageType section.

		/*
		 * This payload is used, when we know (well, or don't know, if dest_th is empty!) TH of the remote client. It uses standard TCP-like
		 * "3-way handshake", but with ECDH generation. This is transmission+crypto-handshake control payload.
		 */
		message ConnectionPart {
			optional bool ACK = 1 [default = false];
			// PUBKEY, PUBKEY_ACK, unencrypted!
			optional bytes src_ecdsa_pubkey = 2;	// Our ECDSA key.
			// ECDH, ECDH_ACK, ECDSA encrypted, ECDSA signed.
			optional bytes src_ecdh_pubkey = 3;	// This connection (ECDH key, signed with our ECDSA key) and then encrypted with their ECDSA pubkey.
			optional bytes signature = 4; // OUR_ECDSA_SIG(src_ecdh_pubkey+dest_th)
			// ACK, AES encrypted. optional bool ACK doesn't make any sense.
			optional bytes aes_ack = 5;	// AES(dest_th), because it is easily-verified, even after TH regeneration using peer's history. Also, checks for stale TH in database.
		}

		optional bytes serialized_payload = 2;

		// KeyRotation part.
		// This is a special part. It is used only when received message was a bit stale.
		message KeyRotation {
			optional bytes old_ecdsa_key = 1;
			optional bytes new_ecdsa_key = 2;
			optional bytes old_signature = 3;
			optional bytes new_signature = 4;
		}

		optional KeyRotation rotation_payload = 3;
	}

	required Payload payload = 2;

	// CRC-32 of serialized message header concatenated with serialized payload. If CRC-32 doesn't match the message, then the message is dropped.
	// This is optional, because TCP is reliable, so CRC checking is not compulsory.
	// But UDP or WiFi packets do not have corruption control.
	optional fixed32 crc32 = 3;
}

/*
 * This message type is used in Local Peer Discovery through UDP.
 */
message UDPDiscoveryMessage {
	required uint32 port = 1;
	optional uint32 version = 2;
}