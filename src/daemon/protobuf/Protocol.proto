/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto2";
package p2pnet.protocol;

message OverlayMessage {
	message Header {
		required bytes src_th = 1;
		required bytes dest_th = 2;

		enum MessagePriority {
			REALTIME = 0;	// This is like UDP.
			RELIABLE = 1;	// This is like SCTP (RFC 4960), but only with delivery control.
		}

		optional MessagePriority prio = 3 [default = RELIABLE];
		optional uint32 seq_num = 4;
		repeated uint32 ack_num = 5 [packed = true];
	}

	required Header header = 1;

	message Payload {
		message ConnectionPart {
			enum ConnectionStage {
				PUBKEY = 0; PUBKEY_ACK = 1;
				ECDH = 2; ECDH_ACK = 3;
				AES = 4;
			}

			required ConnectionStage stage = 1;

			/* payload part */
			optional bytes src_ecdsa_pubkey = 2;	// Our ECDSA key.
			optional string expiration_time = 3;	// Its expiry time in ISO 8601 like YYYYMMDDThhmmss.
			optional string lose_time = 4;	// We will 'forget' our private key after this time.

			optional bytes src_ecdh_pubkey = 5;	// This connection ECDH key, signed with our ECDSA key.
			optional bytes signature = 6; // OUR_ECDSA_SIG(src_ecdh_pubkey)
		}

		message KeyRotationPart {
			message SignedContent {
				optional bytes old_ecdsa_key = 1;
				optional bytes new_ecdsa_key = 2;

				optional string expiration_time = 3;	// Its expiry time in ISO 8601 like YYYYMMDDThhmmss.
				optional string lose_time = 4;	// We will 'forget' our private key after this time.
			}

			optional SignedContent signed_content = 1;
			optional bytes old_signature = 2;
			optional bytes new_signature = 3;
		}

		optional ConnectionPart connection_part = 1;
		optional KeyRotationPart key_rotation_part = 2;

		extensions 16 to max;
	}

	optional Payload payload = 2;
	optional bytes encrypted_payload = 3;
}

/*
 * This message type is used in Local Peer Discovery through UDP.
 */
message UDPDiscoveryMessage {
	required uint32 port = 1;
	optional uint32 version = 2;
}

message ConnectionRequestMessage {
	required bytes src_th = 1;
}