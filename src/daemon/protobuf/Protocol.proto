/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto2";
package p2pnet.protocol;

message OverlayMessageStructure {
	message Header {
		required bytes src_th = 1;
		optional bytes dest_th = 2;

		enum MessagePriority {
			REALTIME = 0;	// This is like UDP.
			RELIABLE = 1;	// This is like SCTP (RFC 4960), but only with delivery control.
		}

		optional MessagePriority prio = 3 [default = RELIABLE];
	}

	required Header header = 1;

	message Payload {
		message Part {
			enum PartType {
				// AES encrypted message type. serialized_payload must contain serialized Payload type.
				ENCRYPTED = 0;
				DATA = 1;
				ONION = 2;

				// Key exchange cryptographic messages.
				CONNECTION_PUBKEY = 3;
				CONNECTION_ECDH = 4;
				CONNECTION_ACK = 5;

				KEY_ROTATION = 6;
				TRANSMISSION_CONTROL = 7;
			}
			optional PartType payload_type = 1 [default = ENCRYPTED];

			message ConnectionPart {
				optional bool ACK = 1 [default = false];
				// PUBKEY, PUBKEY_ACK, unencrypted!
				optional bytes src_ecdsa_pubkey = 2;	// Our ECDSA key.
				// ECDH, ECDH_ACK, ECDSA encrypted, ECDSA signed.
				optional bytes src_ecdh_pubkey = 3;	// This connection (ECDH key, signed with our ECDSA key) and then encrypted with their ECDSA pubkey.
				optional bytes signature = 4; // OUR_ECDSA_SIG(src_ecdh_pubkey+dest_th)
				// ACK, AES encrypted. optional bool ACK doesn't make any sense.
				optional bytes aes_ack = 5;	// AES(aes_key), because it is easily-verified.
			}

			message KeyRotationPart {
				optional bytes old_ecdsa_key = 1;
				optional bytes new_ecdsa_key = 2;
				optional bytes old_signature = 3;
				optional bytes new_signature = 4;
			}

			message TransmissionControlPart {
				required uint32 seq_num = 1;
				repeated uint32 ack_num = 2;
				optional bytes signature = 3;	// Signature of TransmissionControlPart{seq_num, ack_num}. Required by program.
			}

			optional bytes serialized_part = 2;
		}
		repeated Part payload_parts = 1;
	}

	required Payload payload = 2;
}

/*
 * This message type is used in Local Peer Discovery through UDP.
 */
message UDPDiscoveryMessage {
	required uint32 port = 1;
	optional uint32 version = 2;
}