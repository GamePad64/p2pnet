/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto2";
package p2pnet.protocol;

message OverlayMessageStructure {
	message Header {
		required bytes src_th = 1;
		optional bytes dest_th = 2;
	}

	required Header header = 1;

	message Payload {
		// MessageType section.
		enum MessageType {
			// AES encrypted message type. serialized_payload must contain serialized Payload type.
			ENCRYPTED = 0;
			DATA = 1;
			ONION = 2;

			// Key exchange cryptographic messages.
			KEY_REQUEST = 3;	// Not encrypted.
			CONNECTION = 4;	// Encrypted using ECDSA.
		}

		optional MessageType message_type = 1 [default = ENCRYPTED];

		// End of MessageType section.

		/*
		 * This payload is used when we know only TH. So, we need to get remote public key.
		 */
		message KeyRequestPart {
			required bytes src_pubkey = 1;
			required bytes signature = 2;
			optional bool response_expected = 3 [default = false];	// It means "I haven't your ECDSA public key, send me one.
		}

		/*
		 * This payload is used, when we know remote public key and we want to establish the connection.
		 * So, it consists of our ECDSA public key (our identity, in other words) and of ECDH public key,
		 * specially generated for use in connection to [dest_th]. So, the remote will get our ECDSA key (it can derive
		 * our TH, check src_th) and ECDH key.
		 *
		 * We expect ConnectionPart without [src_ecdsa_pubkey] as the answer.
		 */
		message ConnectionPart {
			required bytes src_ecdsa_pubkey = 1;	// Our ECDSA key.
			required bytes src_ecdh_pubkey = 2;	// This connection ECDH key.
			required bytes signature = 3;	// The signature of (src_ecdsa_pubkey + src_ecdh_pubkey) using our ECDSA key.
		}

		optional bytes serialized_payload = 2;
	}

	required Payload payload = 2;

	// CRC-32 of serialized message header concatenated with serialized payload. If CRC-32 doesn't match the message, then the message is dropped.
	// This is optional, because TCP is reliable, so CRC checking is not compulsory.
	// But UDP or WiFi packets do not have corruption control.
	optional fixed32 crc32 = 3;
}

/*
 * This message type is used in Local Peer Discovery through UDP.
 */
message UDPLPDMessage {
	required uint32 port = 1;
	optional uint32 version = 2;

	/*
	 * Earlier, there was only TH, not pubkey. But now, we will send pubkey+signature, so we could trust this peer from NOW.
	 * But, there is spoofing danger. Attacker could read real genuine UDPLPD message and retranslate to us.
	 * So, additional authentication is needed. It will be commited after establishing ECDSA-encrypted connection.
	 */

	required bytes src_pubkey = 3;
	required bytes signature = 4;
}