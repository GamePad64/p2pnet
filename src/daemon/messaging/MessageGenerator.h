/*
 * You may redistribute this program and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef MESSAGEGENERATOR_H_
#define MESSAGEGENERATOR_H_

#include "../protobuf/Protocol.pb.h"
#include "../databases/PersonalKeyStorage.h"

namespace p2pnet {
namespace messaging {

class MessageGenerator {
	databases::PersonalKeyStorage* pks;

	/**
	 * This function concatenates message header with its payload and converts them into string, so we can use this string to compute CRC-32.
	 * @param message Message, that we want to prepare for CRC-32.
	 * @return String, that we pass to hashing function.
	 */
	std::string prepareForCRC32(const protocol::p2pMessage& message);

	protocol::p2pMessage generateMessage(const protocol::p2pMessage_Header& header,
			const protocol::p2pMessage_Payload& payload);
public:
	MessageGenerator();
	virtual ~MessageGenerator();

	bool checkMessageCRC32(protocol::p2pMessage message);

	/**
	 * This generates message ready to be sent over p2p tunnel.
	 * This version can be used when we are relaying a message or sending a message by ourselves.
	 *
	 * @param src_th -- source TH
	 * @param dest_th -- destination TH
	 * @param payload -- payload, generated by MessageGenerator::generate*.
	 * @return message ready to be sent over p2p tunnel.
	 */
	protocol::p2pMessage generateMessage(const peer::TH& src_th,
			const peer::TH& dest_th,
			const protocol::p2pMessage_Payload& payload);
	/**
	 * This generates message ready to be sent over p2p tunnel.
	 * This version can be used when we are sending a message by ourselves to a specific peer.
	 *
	 * @param dest_th -- destination TH
	 * @param payload -- payload, generated by MessageGenerator::generate*.
	 * @return message ready to be sent over p2p tunnel.
	 */
	protocol::p2pMessage generateMessage(const peer::TH& dest_th, const protocol::p2pMessage_Payload& payload);

	// Payload generators
	protocol::p2pMessage_Payload generateKeyExchangePayload();
	protocol::p2pMessage_Payload generateAgreementPayload(std::string ecdh_pubkey);
	protocol::p2pMessage_Payload generateConnectionPayload(std::string ecdh_pubkey);
};

} /* namespace messaging */
} /* namespace p2pnet */
#endif /* MESSAGEGENERATOR_H_ */
